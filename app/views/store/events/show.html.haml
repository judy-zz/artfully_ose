:javascript
  $(document).ready(function(){

    // show/hide extended event descriptions
    $('.truncated a.toggle, .not-truncated a.toggle').click(function(e) {
      e.preventDefault();
      $(this).parents('.toggle-truncated').find('.truncated, .not-truncated').toggle();
    })

    // toggle a showing's sections
    $('.title').click(function() {
      $(this).siblings('.sections').slideToggle();
      $(this).toggleClass('active');
    })

    // display the first showing's sections
    $('.title').first().siblings('.sections').slideToggle();
    $('.title').first().addClass('active');

    // when calendar is clicked
    $('td.show').click(function() {
      $("ul#shows li").hide();
      var date = $(this).attr('data-date');
      $("ul#shows li[data-date='" + date + "']").show();
      $("ul#shows li[data-date='" + date + "'] .title").addClass('active');
      $("ul#shows li[data-date='" + date + "'] .sections").show();
    });

    // click "add to cart" button on tickets
    $('.add-tickets-to-cart').submit(function(e) {
      e.preventDefault();
      $('#shopping-cart #steps').slideDown(); // not sure why this isn't slideUp

      params = {
        sectionId:   $(this).find('#section_id').val(),
        showId:      $(this).find('#show_id').val(),
        sectionName: $(this).find('#section_name').val(),
        ticketCount: parseInt($(this).find('#ticket_count').val()),
        ticketPrice: parseFloat($(this).find('#ticket_price').val()),
        showingName: $(this).find('#showing_name').val()
      }

      addItemToCart('ticket', params);
    });

    // click "make donation" button on donation
    $('.add-donation-to-cart').submit(function(e) {
      e.preventDefault();
      donationAmount = $(this).find('#donation_amount').asNumber();
      if (donationAmount > 0) {
        $('#shopping-cart #steps').slideDown(); // not sure why this isn't slideUp
        addItemToCart('donation', { donationAmount: donationAmount}); 
      }
    });

    // click "complete purchase" to submit payment
    $('form#shopping-cart-form').submit(function(e) {
      e.preventDefault();
      checkout();
    });

    // show shopping cart when clicked
    $('#shopping-cart-controls').click(function() {
      $('#shopping-cart #steps').slideToggle();
    })

    // add * to required field labels
    $('label.required').append('&nbsp;<strong>*</strong>&nbsp;');

    // switch shopping cart tabs
    $('[data-toggle="tab"]').click(function(e) {
      e.preventDefault();
      currentSectionId = $('li.active a').attr('href');

      // dont switch if continue is disabled
      if (!($(currentSectionId+' .continue a').hasClass('disabled'))) {

        // validate section before switching tabs
        if (validateSection(currentSectionId)) {
          newHref = $(this).attr('href');
          $('#nav li').removeClass('active');
          $('li a[href="' + newHref + '"]').parent('li').addClass('active');
          switchTabs(newHref);
        };
        // else, dont switch
        // errors will be shown 
      }
    });

    // click "remove" on a cart item
    $(document).on('click', 'td.remove a', function(e) {
      e.preventDefault();
      $(this).parents('tr').remove();
      updateServiceCharge();
      updateTotal();
      $('.formatCurrency').formatCurrency();
      updateOrderOnServer();
    })

    // change drop down on tickets in cart
    $(document).on('change', '#cart select.ticket-count', function(e) {
      updateQuantityInCart()
      updateServiceCharge();
      updateTotal();
      $('.formatCurrency').formatCurrency();
      updateOrderOnServer();
    });
  });

  function updateOrderOnServer() {
    $('#cart .continue a').addClass('disabled');
    $('.continue #cart-total').hide();
    $('#cart .over-limit').remove();
    // POST "/store/order/storefront_sync"
    // Store::OrdersController#storefront_sync
    // Parameters: {"sections"=>{"0" => {"section_id" => "1", "show_id" => "1", "limit" => "4"}, "1" => {"section_id" => "2", "show_id" => "1", "limit" => "4"}], "donation"=>{"organization_id"=>"92", "amount"=>"1000"}}
    var params = {};

    sections = [];
    $('tr.ticket').each(function() {
      sections.push({
        section_id: $(this).attr('data-section-id'),
        show_id: $(this).attr('data-show-id'),
        limit:  $(this).find('.quantity').attr('data-quantity')
      });
    });
    if (sections.length > 0) {
      params.sections = sections;
    }

    console.log(params);

    donationAmount = parseFloat($('tr.donation td.price').attr('data-price')) * 100;
    if (donationAmount > 0) {
      params.donation = {
        organization_id: #{@event.organization.id},
        amount: donationAmount
      }
    }

    $.ajax({
      url: "#{storefront_sync_store_order_path}",
      type: "POST",
      data: params,
      success: function(data) {
        // we dont have enough tickets available
        if (data.over_section_limit) {
          jQuery.each(data.over_section_limit, function(index, section) {
            ticket = $("tr.ticket[data-section-id='" + section.section_id + "'][data-show-id='" + section.show_id + "']");
            ticket.find('.quantity select').val(section.limit);
            var message = "";
            if (section.limit == 0) {
              message += "No tickets available for this show's section."
            } else if (section.limit == 1) {
              message += "Only 1 ticket available for this show's section."
            } else {
              message += "Only " + section.limit + " tickets available for this show's section."
            }
            ticket.find('.quantity select').after("<span class='over-limit'><br />" + message + "</span>");
          });
          updateQuantityInCart();
          updateServiceCharge();
          updateTotal();
          $('.formatCurrency').formatCurrency();
        };
        // validate amount
        $('#cart .continue a').removeClass('disabled');
        $('.continue #cart-total').show();
      },
      error: function(data) {
        console.log("updateOrderOnServer: ERROR");
        console.log(data);
      }
    });
  }

  function updateQuantityInCart() {
    $('#cart select.ticket-count').each(function() {
      ticketCount = parseInt($(this).val());
      sectionId = $(this).parents('tr').attr('data-section-id');
      showId = $(this).parents('tr').attr('data-show-id');
      unitPrice = $(this).parent('td').attr('data-unit-price')

      $(this).parent('td').attr('data-quantity', ticketCount);
      subTotal = parseFloat(unitPrice) * ticketCount;
      $(this).parents('tr').find('td.price').attr('data-price', subTotal);
      $(this).parents('tr').find('td.price h5').text(subTotal);
    })
  }

  function checkout() {
    // POST "/store/checkout" // Store::CheckoutsController#create as HTML // Parameters: {"utf8"=>"âœ“", "authenticity_token"=>"oGmh5IrGv6CU3aPbpERHFNTpZg6YAiwLXY66d0zev6I=", "athena_payment"=>{"athena_customer"=>{"first_name"=>"test", "last_name"=>"test", "phone"=>"test", "email"=>"test@test.com"}, "athena_credit_card"=>{"cardholder_name"=>"test test", "card_number"=>"4242424242424242", "cvv"=>"123", "expiration_date(3i)"=>"1", "expiration_date(2i)"=>"2", "expiration_date(1i)"=>"2015"}, "billing_address"=>{"street_address1"=>"test", "city"=>"test", "state"=>"AL", "postal_code"=>"12345"}, "user_agreement"=>"1"}, "confirmation"=>"1", "commit"=>"Purchase"}

    $.ajax({
      type: 'POST',
      url: '#{storefront_create_store_checkout_path}',
      data: $("form#shopping-cart-form").serialize(),
      success: function(data) {
        $('#nav').hide();
        // console.log("SUCCESS!");
        // console.log(data);
        $('.tab-pane').hide();
        $('.tab-pane#result').show();
        $('.tab-pane#result').text("Thanks for your purchase. We have emailed you a receipt.");
      },
      error: function(data) {
        $('#nav li').removeClass('active');
        // console.log("ERROR!");
        // console.log(data);
        $('.tab-pane').hide();
        $('.tab-pane#result').show();
        $('.tab-pane#result').html("<h4>Your payment did not go through. Please check the issues below.</h4><p>" + data.responseText + ".</p>");
      }
    });
  }

  function switchTabs(newSectionId) {
    $('.tab-pane').hide();
    $(newSectionId+'.tab-pane').show();
  }

  // validate fields inside a shopping cart tab
  // return true if everything valid, false otherwise
  // add error classes and labels if its invalid
  function validateSection(sectionId) {
    var everythingValid = true;
    $(sectionId + ' input.required').each(function() {
      v = $('#shopping-cart-form').validate().element("#" + $(this).attr('id'));
      if (!(v)) {everythingValid = false};
    });
    return everythingValid;
  }

  function addItemToCart(type, params) {
    if (type === 'ticket') {
      // if exisiting line item for this secion and show, dont add it again
      if (!($("[data-section-id='" + params.sectionId + "'][data-show-id='" + params.showId + "']").size() > 0)) {
        createTicketLineItem(params); 
      }
      updateServiceCharge();
      
    } else if (type === 'donation') {
      createOrUpdateDonationLineItem(params);
    }

    updateTotal();
    $('.formatCurrency').formatCurrency();
    updateOrderOnServer();
  }

  function createTicketLineItem(params) {
    $('#cart table').prepend(
      "<tr class='ticket' data-section-id='" + params.sectionId + "' data-show-id='" + params.showId + "'>" +
        "<td class='remove'><a href='#'>remove</a></td>" +
        "<td class='details'>" +
          "<h5>" + params.sectionName + " ticket</h5>" +
          "#{@event.name}<br />" +
          params.showingName +
        "</td>" +
        "<td class='quantity' data-quantity='" + params.ticketCount + "' data-unit-price='" + params.ticketPrice + "'>" +
          "#{escape_javascript(select_tag "tickets[][count]", options_for_select((0..10).to_a.map {|i| [pluralize(i, 'Ticket'), i]}), :class => "ticket-count")}" +
          "<br /><span class='formatCurrency'>" + params.ticketPrice + "</span> each" +
          "<input id='section_id' name='tickets[][section_id]' type='hidden' value='" + params.sectionId +"'>" +
        "</td>" +
        "<td class='price' data-price='" + (params.ticketPrice * params.ticketCount) + "'>" + 
          "<h5 class='formatCurrency'>" +
            (params.ticketPrice * params.ticketCount) +
          "</h5>" + 
        "</td>" +
      "</tr>"
    );

    $("[data-section-id='" + params.sectionId + "'][data-show-id='" + params.showId + "'] .ticket-count").val(params.ticketCount);
  };

  function createOrUpdateDonationLineItem(params) {
    $('#cart table tr.donation').remove();
    $('#cart table').prepend(
      "<tr class='donation'>" +
        "<td class='remove'><a href='#'>remove</a></td>" +
        "<td class='details'><h5>Donation</h5></td>" +
        "<td class='quantity'></td>" +
        "<td class='price' data-price='" + params.donationAmount + "'>" + 
          "<h5 class='formatCurrency'>" + params.donationAmount + "</h5>" + 
        "</td>" +
      "</tr>"
    );
  }

  function updateServiceCharge() {
    quantity = 0;
    $('tr.ticket').each(function() {
      quantity += parseInt($(this).find('td.quantity').attr('data-quantity'));
    });

    if (quantity > 0) {
      $('tr#service-charge').show();
      $('tr#service-charge td.quantity span').text(quantity);
      $('tr#service-charge td.price h5').html(quantity * 2.00);
      $('tr#service-charge td.price').attr('data-price', (quantity * 2.00));
    } else {
      $('tr#service-charge td.price').attr('data-price', 0);
      $('tr#service-charge').hide();
    }
  }

  function updateTotal() {
    total = 0;
    $('[data-price]').each(function() {
      total += parseFloat($(this).attr('data-price'));
    });
    $('.continue #cart-total').html(total);
  }
#content
  #store
    #artfully-alert.flash.error
    #event
      = image_tag('storefront/logo.png', :id => 'logo')
      %h1#logo= @event.name
      %h3#producer= @event.producer

      - @use_calendar = (@event.shows.unplayed.length > 5 || params[:calendar] == 'true')

      %ul#shows
        =render :partial => 'show', :collection => @event.shows.unplayed, :as => :show
      
      =render 'calendar' if @use_calendar
    
  #sidebar
    - unless @event.description.blank?
      #description
        %h2 About
        =image_tag(@event.image.url(:thumb), :width => 140, :height => 140) if @event.image
        -if @event.description.length > 300
          .toggle-truncated
            .truncated
              = simple_format "#{truncate(@event.description, :length => 300)} (#{link_to 'more','#', :class => 'toggle'})"
            .not-truncated{:style => 'display:none;'}
              =simple_format "#{@event.description} (#{link_to 'less','#', :class => 'toggle'})"
        - else
          =simple_format @event.description
    %h2 Venue
    #venue
      =link_to image_tag("http://maps.google.com/maps/api/staticmap?size=140x140&maptype=roadmap&markers=color:red|#{@event.venue.address_as_url_query}&sensor=false&zoom=15"), "http://maps.google.com/maps?q=#{@event.venue.address_as_url_query.html_safe}&z=15"
      %div
        %strong=@event.venue.name
      %div=@event.venue.street_as_string
      %div=@event.venue.city_state_zip_as_string
    - unless @event.contact_email.blank? && @event.contact_phone.blank?
      %h2 Contact
      #contact
        - unless @event.contact_email.blank?
          = mail_to @event.contact_email
          <br />
        - unless @event.contact_phone.blank?
          = @event.contact_phone
    - if @event.organization.can?(:receive, Donation)
      #donation
        %h2 Donate
        %p Help support the show by adding a donation to your order! Contributions are tax-deductible to the extent permitted by law.
        = form_tag '', :class => 'add-donation-to-cart' do
          = text_field_tag :donation_amount, '$', :class => 'input_small'
          = submit_tag 'Donate Now'

#shopping-cart.shown
  #shopping-cart-controls
    %span.cart-name Shopping Cart
  = form_tag '', :id => 'shopping-cart-form' do
    #steps
      %ul#nav
        %li.active= link_to 'Cart', '#cart', 'data-toggle' => 'tab'
        %li= link_to 'Contact Info', '#contact-info', 'data-toggle' => 'tab'
        %li= link_to 'Payment Details', '#payment-details', 'data-toggle' => 'tab'
        %li= link_to 'Billing Address', '#billing-address', 'data-toggle' => 'tab'
        %li= link_to 'Purchase', '#purchase', 'data-toggle' => 'tab'
      .tab-pane#cart{:style => 'display:block;'}
        %table

          %tr#service-charge{:style => 'display:none'}
            %td
            %td.details
              Service Charge
            %td.quantity
              %span
              x $2.00 per ticket
            %td.price
              %h5.formatCurrency

        .continue
          = link_to 'Checkout Now', '#contact-info', 'data-toggle' => 'tab'
          %h4#cart-total.formatCurrency

      .tab-pane#contact-info
        %fieldset
          = fields_for "athena_payment[athena_customer]" do |athena_customer|
            %ul
              %li
                .label= athena_customer.label :first_name, "First Name", :class => 'required'
                .element= athena_customer.text_field :first_name, :class => 'required'
              %li
                .label= athena_customer.label :last_name, "Last Name", :class => 'required'
                .element= athena_customer.text_field :last_name, :class => 'required'
              %li
                .label= athena_customer.label :email, "Email", :class => 'required'
                .element= athena_customer.text_field :email, :class => 'required', :type => 'email'
              %li
                .label= athena_customer.label :phone, "Phone", :class => 'required'
                .element= athena_customer.text_field :phone, :class => 'required'
          .continue
            = link_to 'Next Â»', '#payment-details', 'data-toggle' => 'tab'

      .tab-pane#payment-details
        %fieldset
          = fields_for "athena_payment[athena_credit_card]" do |card|
            %ul
              %li
                .label= card.label :cardholder_name, "Cardholder Name", :class => 'required'
                .element= card.text_field :cardholder_name, :class => 'required'
              %li
                .label= card.label :card_number, "Card Number", :class => 'required'
                .element
                  = card.text_field :card_number, :class => 'required', :type => 'creditcard'
                  = image_tag 'storefront/lock.png'
              %li
                .label= card.label :cvv, "CVV", :class => 'required'
                .element
                  = card.text_field :cvv, :class => 'required small'
                  = image_tag 'storefront/cvv.gif'
              %li
                .label= card.label :expiration, "Expiration", :class => 'required'
                .element.small
                  = card.select 'expiration_date(2i)', options_for_select((1..12).map{|m| "%02d" % m}), {}, :class => "small"
                  #expiration-slash /
                  = card.select 'expiration_date(1i)', options_for_select(Date.today.year..Date.today.year+10), {}, :class => "small"
                  = card.hidden_field 'expiration_date(3i)', :value => 1
          .continue
            = link_to 'Next Â»', '#billing-address', 'data-toggle' => 'tab'
      
      .tab-pane#billing-address
        %fieldset
          = fields_for "athena_payment[billing_address]" do |address|
            %ul
              %li
                .label= address.label :street_address1, "Billing Address", :class => 'required'
                .element= address.text_field :street_address1, :class => 'required'
              %li
                .label= address.label :city, "City", :class => 'required'
                .element= address.text_field :city, :class => 'required'
              %li
                .label= address.label :state, "State", :class => 'required'
                .element= address.text_field :state, :class => 'required'
              %li
                .label= address.label :postal_code, "Postal Code", :class => 'required'
                .element= address.text_field :postal_code, :class => 'required'
          .continue
            = link_to 'Next Â»', '#purchase', 'data-toggle' => 'tab'

      .tab-pane#purchase
        %fieldset
          %ul
            %li#agreement
              .label
                %label
                  = check_box_tag "[athena_payment][user_agreement]", 1, false, :validate => "required:true"
                  I have read, understand and accept the terms and conditions of the User Agreement below.
          
        #user_agreement
          = t("pages.user_agreement.content", :default => "")
        = hidden_field_tag :confirmation, 1
        .continue
          = submit_tag 'Complete Purchase', :id => 'complete-purchase'

      .tab-pane#result
        
